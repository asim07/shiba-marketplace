{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_iMarketSettings",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_iERC721CreatorRoyalty",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_bidder",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_startedAuction",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_newAuctionLength",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_previousBidder",
						"type": "address"
					}
				],
				"name": "AuctionBid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_bidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_seller",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "AuctionSettled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_auctionCreator",
						"type": "address"
					}
				],
				"name": "CancelAuction",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_auctionCreator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_reservePrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_lengthOfAuction",
						"type": "uint256"
					}
				],
				"name": "NewColdieAuction",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_auctionCreator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_startingBlock",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_minimumBid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_lengthOfAuction",
						"type": "uint256"
					}
				],
				"name": "NewScheduledAuction",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_payee",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "SendValue",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "COLDIE_AUCTION",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "NO_AUCTION",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SCHEDULED_AUCTION",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "auctionLengthExtension",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "bid",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "cancelAuction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_reservePrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_lengthOfAuction",
						"type": "uint256"
					}
				],
				"name": "createColdieAuction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_minimumBid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_lengthOfAuction",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_startingBlock",
						"type": "uint256"
					}
				],
				"name": "createScheduledAuction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getAuctionDetails",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getCurrentBid",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "iERC721CreatorRoyalty",
				"outputs": [
					{
						"internalType": "contract IERC721CreatorRoyalty",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "iMarketSettings",
				"outputs": [
					{
						"internalType": "contract IMarketplaceSettings",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumBidIncreasePercentage",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "dest",
						"type": "address"
					}
				],
				"name": "payments",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionLengthExtension",
						"type": "uint256"
					}
				],
				"name": "setAuctionLengthExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "setIERC721CreatorRoyalty",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "setMarketplaceSettings",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_maxLength",
						"type": "uint256"
					}
				],
				"name": "setMaxLength",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_percentage",
						"type": "uint8"
					}
				],
				"name": "setMinimumBidIncreasePercentage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "settleAuction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "payee",
						"type": "address"
					}
				],
				"name": "withdrawPayments",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"bid(address,uint256,uint256)": {
					"details": "Bid on artwork with an auction. Rules: - if auction creator is still owner, owner must have contract approved - There must be a running auction or a reserve price auction for the token - bid > 0 - if startingBlock - block.number < auctionLengthExtension -    then auctionLength = Starting block - (currentBlock + extension) - Auction creator != bidder - bid >= minimum bid - bid >= reserve price - block.number < startingBlock + lengthOfAuction - bid > current bid - if previous bid then returned",
					"params": {
						"_amount": "uint256 Wei value of the bid.",
						"_contractAddress": "address of ERC721 contract.",
						"_tokenId": "uint256 id of the token."
					}
				},
				"cancelAuction(address,uint256)": {
					"details": "cancel an auction Rules: - Must have an auction for the token - Auction cannot have started - Must be the creator of the auction - Must return token to owner if escrowed",
					"params": {
						"_contractAddress": "address of ERC721 contract.",
						"_tokenId": "uint256 id of the token."
					}
				},
				"constructor": {
					"details": "Initializes the contract setting the market settings and creator royalty interfaces.",
					"params": {
						"_iERC721CreatorRoyalty": "address to set as iERC721CreatorRoyalty.",
						"_iMarketSettings": "address to set as iMarketSettings."
					}
				},
				"createColdieAuction(address,uint256,uint256,uint256)": {
					"details": "create a reserve auction token contract address, token id, price Rules: - Cannot create an auction if contract isn't approved by owner - lengthOfAuction (in blocks) > 0 - lengthOfAuction (in blocks) <= maxLength - Reserve price must be >= 0 - Must be owner of the token - Cannot have a current auction going",
					"params": {
						"_contractAddress": "address of ERC721 contract.",
						"_lengthOfAuction": "uint256 length of auction in blocks.",
						"_reservePrice": "uint256 Wei value of the reserve price.",
						"_tokenId": "uint256 id of the token."
					}
				},
				"createScheduledAuction(address,uint256,uint256,uint256,uint256)": {
					"details": "create a scheduled auction token contract address, token id Rules: - lengthOfAuction (in blocks) > 0 - startingBlock > currentBlock - Cannot create an auction if contract isn't approved by owner - Minimum bid must be >= 0 - Must be owner of the token - Cannot have a current auction going for this token",
					"params": {
						"_contractAddress": "address of ERC721 contract.",
						"_lengthOfAuction": "uint256 length of auction in blocks.",
						"_minimumBid": "uint256 Wei value of the reserve price.",
						"_startingBlock": "uint256 block number to start the auction on.",
						"_tokenId": "uint256 id of the token."
					}
				},
				"getAuctionDetails(address,uint256)": {
					"details": "Get current auction details for a token Rules: - Return empty when there's no auction",
					"params": {
						"_contractAddress": "address of ERC721 contract.",
						"_tokenId": "uint256 id of the token."
					}
				},
				"getCurrentBid(address,uint256)": {
					"details": "Get the current bid Rules: - Return empty when there's no bid",
					"params": {
						"_contractAddress": "address of ERC721 contract.",
						"_tokenId": "uint256 id of the token."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"payments(address)": {
					"details": "Returns the payments owed to an address.",
					"params": {
						"dest": "The creditor's address."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setAuctionLengthExtension(uint256)": {
					"details": "Admin function to set the auctionLengthExtension of an auction. Rules: - only owner - _auctionLengthExtension > 0",
					"params": {
						"_auctionLengthExtension": "uint256 max length of an auction."
					}
				},
				"setIERC721CreatorRoyalty(address)": {
					"details": "Admin function to set the IERC721CreatorRoyalty. Rules: - only owner - _address != address(0)",
					"params": {
						"_address": "address of the IERC721CreatorRoyalty."
					}
				},
				"setMarketplaceSettings(address)": {
					"details": "Admin function to set the marketplace settings. Rules: - only owner - _address != address(0)",
					"params": {
						"_address": "address of the IMarketplaceSettings."
					}
				},
				"setMaxLength(uint256)": {
					"details": "Admin function to set the maxLength of an auction. Rules: - only owner - _maxLangth > 0",
					"params": {
						"_maxLength": "uint256 max length of an auction."
					}
				},
				"setMinimumBidIncreasePercentage(uint8)": {
					"details": "Admin function to set the minimum bid increase percentage. Rules: - only owner",
					"params": {
						"_percentage": "uint8 to set as the new percentage."
					}
				},
				"settleAuction(address,uint256)": {
					"details": "Settles the auction, transferring the auctioned token to the bidder and the bid to auction creator. Rules: - There must be an unsettled auction for the token - current bidder becomes new owner - auction creator gets paid - there is no longer an auction for the token",
					"params": {
						"_contractAddress": "address of ERC721 contract.",
						"_tokenId": "uint256 id of the token."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"withdrawPayments(address)": {
					"details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
					"params": {
						"payee": "Whose payments will be withdrawn."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SuperRareAuctionHouse.sol": "SuperRareAuctionHouse"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"IERC721CreatorRoyalty.sol": {
			"keccak256": "0xb213db0f429673b27cdb5e65a97e86d49bd9d23dffa1cd0b67050e81f99a632d",
			"urls": [
				"bzz-raw://0dd753aebf7cf78ff073d02e27fe11a3819384cb1273e6928dba7e35a442cd47",
				"dweb:/ipfs/QmW2Hx4DAt4AwWXrhWFUHSqZQJPhWJZrSz5y8z8pTVhpY5"
			]
		},
		"IERC721TokenCreator.sol": {
			"keccak256": "0xe404c8ed80c68cea7adf1fa4cbfc63f2131ec8945f991964a1d01b01a8a8170b",
			"urls": [
				"bzz-raw://3d4e5a09daa11a08c920ac43a2a0b44ff3013ad0ca83fc583b7e11b168c710cc",
				"dweb:/ipfs/QmTPXxH4QWkfLM9P8jHYMvQvRsQaYLBPfC8Jq72DppGLps"
			]
		},
		"ISendValueProxy.sol": {
			"keccak256": "0x82cafabc426f2a80133a8f857cd2c86c01336aa3e11f18e8ea2ed75b9a8ab00d",
			"urls": [
				"bzz-raw://daee5ed8b465d4099b13c3f2fc8b3431a10943d790d23ad2abf528348c898cb8",
				"dweb:/ipfs/Qmbvi4mD5y3FJDDyP62G89XFxLgczpJQ94UKzGQzszFtm5"
			]
		},
		"Marketplace/IMarketplaceSettings.sol": {
			"keccak256": "0x78f9252a99678e4af054837ccc0d286a9ce9b97a1527f09fcef281958a4fe46c",
			"urls": [
				"bzz-raw://7a53f855607c64ce2dad143f158c0fb1f96538f4ab0ee5034596b3f4076a93e3",
				"dweb:/ipfs/QmYcchGhNbEAXzXHSmJvsogo3c4hrryTQQqmnWHUSvfUT1"
			]
		},
		"MaybeSendValue.sol": {
			"keccak256": "0xc1835be6bd15a8412a54c6fc9f302098ec05fd0db9da6a93c5c19b4e0968d429",
			"urls": [
				"bzz-raw://f099c05e2ef71412ec58a9dc0869f973dbe940bd8891a28fc10915e24185de40",
				"dweb:/ipfs/QmPpRPCfGy76ezmHdTZZtbn3p385un91CH2AvX9A1eG5vd"
			]
		},
		"Payments.sol": {
			"keccak256": "0x00202ca7df54e94967f888c2a0c510fc3ef78c2f54fdccd1c87c35efe10f191f",
			"urls": [
				"bzz-raw://3950ee1912a5bc4507d1f6294b05ee4917c8bedca3539da133a88220175dac7d",
				"dweb:/ipfs/QmNiyaGLVF1C6aXdDT4fxB7uxHJTTmnXbZEbMjcKbcbzY4"
			]
		},
		"SendValueOrEscrow.sol": {
			"keccak256": "0xbb4341b51e12db9e07b2fb5f0c7cb6943d2f747bb19141d569f6e3d9ca7838b1",
			"urls": [
				"bzz-raw://f8ee5130063c28d489e3bfc2b664adeeea00b40b5c996db9731159da9dab93c2",
				"dweb:/ipfs/QmXWJdseYM92fTthrjppEWJmoKgfQgNKfY1fBjK6Ld391L"
			]
		},
		"SendValueProxy.sol": {
			"keccak256": "0x0fbe48a525bc57d040970f138fc610ced1c8a0181027a6fc9d89613a7aff25b3",
			"urls": [
				"bzz-raw://bc8c4f4e1b1556b0198e1ed3cde5b6bba75b968eeb10458bedf8af5e8a2920ee",
				"dweb:/ipfs/QmVw2Pnh3fCfxZDviifejiRPGKLxSnbtsPFFAM3374UQti"
			]
		},
		"SuperRareAuctionHouse.sol": {
			"keccak256": "0x7884fd89fb5834788244d9d4d0cfabf5230a2d4e152713e3342f5e8dca06b926",
			"urls": [
				"bzz-raw://50f8c7f20d98ddaf00e5a778062bd87b63268547a31d9ffea910776feb1640e4",
				"dweb:/ipfs/QmcaDvpuMBHdvLxqeyBiYrWdfamG5ocrMsCBhDGwTnQWUX"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/access/Ownable.sol": {
			"keccak256": "0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d",
			"license": "MIT",
			"urls": [
				"bzz-raw://90faf5851c02f9bd42c5bfb54d4f0421a2612f50ab80b2c4fa24fa3792071cc2",
				"dweb:/ipfs/QmRGM4F2PcGVF85aTfaA9YBhCHHDqrMhRjyp6fGeBTtirb"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/introspection/IERC165.sol": {
			"keccak256": "0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd970f51e3a77790c2f02b5b1759827c3b897c3d98c407b3631e8af32e3dc93c",
				"dweb:/ipfs/QmPF85Amgbqjk3SNZKsPCsqCw8JfwYEPMnnhvMJUyX58je"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/math/SafeMath.sol": {
			"keccak256": "0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52",
			"license": "MIT",
			"urls": [
				"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c",
				"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/payment/PullPayment.sol": {
			"keccak256": "0x0696fbc20eb6f065f0752327251d10fadf472727ecc2160e1e7dd9a2a64f1d33",
			"license": "MIT",
			"urls": [
				"bzz-raw://ceeba7cc79d800f9f0f91c7da6f274a723280fe960118d6187c5dec66d631501",
				"dweb:/ipfs/Qmbd7Nm5SW55146yC5C81TYfaKexqYBGmKLSAdW5AvmGFC"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/payment/escrow/Escrow.sol": {
			"keccak256": "0xd1ad7c055efcaa14294e51fdef8c2f8f9a2ee1b622cfef50b0bec2ed56339a49",
			"license": "MIT",
			"urls": [
				"bzz-raw://86390a279edb3e655529aaeb96b4a62cf50bf6dcb202f481336af00e949ab20e",
				"dweb:/ipfs/QmUFZEQi3T6R5YMqTErAjp65LAmknZNGf9pX6rhz1fMuFn"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962",
			"license": "MIT",
			"urls": [
				"bzz-raw://2dcdce5ede1e5e650d174ec0b35be7d47b6a50f30bc895ef0d9e59fb75052e45",
				"dweb:/ipfs/QmQ2XFsDLTYqfEdw7pYzHiGtFRY11yQm4b6ynYgKqDxeB8"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/utils/Address.sol": {
			"keccak256": "0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea",
			"license": "MIT",
			"urls": [
				"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c",
				"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/utils/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		}
	},
	"version": 1
}